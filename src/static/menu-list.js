const menuList = [{
  label: 'General Patterns',
  links: [
    'Function Declarations',
    'Conditionals',
    'Access to the Global Object',
    'Single var Pattern',
    'Hoisting',
    'for loops',
    'for-in loops',
    '(Not) Augmenting Built-in Prototypes',
    'switch Pattern',
    'Implied Typecasting',
    'Avoiding eval()',
    'Number Conversions with parseInt()',
    'Minimizing Globals',
    'The Problem with Globals',
  ],
}, {
  label: 'Literals and Constructors Patterns',
  links: [
    'Object literal',
    'Enforcing new',
    'Array literal ',
    'Working with JSON',
    'Primitive wrappers',
    'Regular expression literal',
  ],
}, {
  label: 'Function Patterns',
  links: [
    'Callback patterns',
    'Configuration objects',
    'Returning functions',
    'Currying',
    'Partial application',
    'Immediate functions',
    'Immediate object initialization',
    'Init-time branching',
    'Memoization',
    'Self-defining functions',
  ],
}, {
  label: 'Object Creation Patterns',
  links: [
    'Namespace',
    'Declaring Dependencies',
    'Private Properties and Methods',
    'Revelation Pattern',
    'Module Pattern',
    'Sandbox',
    'Static Members',
    'Object Constants',
    'Chaining Pattern',
    'method() Method',
  ],
}, {
  label: 'Code Reuse Patterns',
  links: [
    'The default pattern',
    'Rent a constructor',
    'Rent and Set Prototype',
    'Share the Prototype',
    'A Temporary Constructor',
    'Klass',
    'Prototypal Inheritance',
    'Inheritance by Copying Properties',
    'Mix-ins',
    'Borrowing Methods',
  ],
}, {
  label: 'Design Patterns',
  links: [
    'Builder',
    'Factory method',
    'Singleton',
    'Decorator',
    'Facade',
    'Proxy',
    'Chain of responsibility',
    'Command',
    'Iterator',
    'Mediator',
    'Observer',
    'Strategy',
  ],
}];

export default menuList;